#[#scriptContent#=#string#<#
        .SYNOPSIS
        List files and folders for the path provided

        .DESCRIPTION
        This script will list files and folders for the path provided .

        .PARAMETER Name
        Root Folder
        
		.INPUTS
        RootFolder name
        
		.OUTPUTS
        A report will be generated listing the files and folders with the size

        .VERSION
        1.0

        .DEVELOPER
        vRO Automation Team
    #>



try{


$RootFolder = "[RootFolder]"
$path = "[path]"
$filename = "[filename]"

function Get-ChildItemDeep
{
  param(
    [Parameter(ParameterSetName='Items', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${Path},

    [Parameter(Position=1)]
    [string]
    ${Filter},

    [Parameter(Mandatory=$true)]
    [int]
    ${Depth}
  )

  # Make a copy of the params for `Get-ChildItem`
  $GCIParams = @{}
  foreach($ParamName in $PSBoundParameters.Keys.Where({$_ -ne 'Depth'})){
    $GCIParams[$ParamName] = $PSBoundParameters[$ParamName]
  }

  # Decrease depth for next call
  $PSBoundParameters['Depth']--

  # Call Get-ChildItem
  Get-ChildItem @GCIParams |ForEach-Object {
    $_
    # Recurse if appropriate
    if($_.PSIsContainer -and $Depth -gt 1){
      $PSBoundParameters['Path'] = $_.FullName
      Get-ChildItemDeep @PSBoundParameters
    }
  }
}

function Get-FormattedSize{
    param(
        [parameter( Mandatory = $true )]
        [int64]$Size
        )

    switch( $Size ){
        { $Size -gt 1GB }{ '{0:N2} GB' -f ( $Size  / 1GB ); break }
        { $Size -gt 1MB }{ '{0:N2} MB' -f ( $Size  / 1MB ); break }
        { $Size -gt 1KB }{ '{0:N2} KB' -f ( $Size  / 1KB ); break }
        default { "$Size B"; break }
        }
    }
if (-not $RootFolder.EndsWith('\')) {
            $RootFolder = "$RootFolder\"
        }
$slashcount=([regex]::Matches($RootFolder, '\\' )).count
#Write-Host "Target Path: $RootFolder"
#Write-Host "Slash count = $slashcount"
##Check for Drive Letter##
#if($Path.Contains(':') -and $slashcount -lt 2)
if($slashcount -lt 2)
{

$Results = New-Object -TypeName System.Collections.ArrayList

#$RootSize = Get-ChildItem -Path $RootFolder -Recurse |
$RootSize = Get-ChildItem -Path $RootFolder -Recurse -ErrorAction SilentlyContinue -Force|
        Where-Object { -not $_.PSIsContainer } |
        Measure-Object -Property Length -Sum |
        Select-Object -ExpandProperty Sum

$null = $Results.Add(( New-Object -TypeName psobject -Property @{
    Path = $RootFolder
    Size = Get-FormattedSize -Size $RootSize
    } ))

$null = $Results.Add( '' )
#Write-Host "Check root folder complete"
#$Folders = Get-ChildItem -Path $RootFolder -Recurse |
$Folders = Get-ChildItem -Path $RootFolder -ErrorAction SilentlyContinue -Force|
    Where-Object { $_.PSIsContainer } |
    Select-Object -ExpandProperty FullName

$Folders = ,$RootFolder + $Folders

$null = foreach( $Folder in $Folders ){
    
		if((Get-Host).Version.Major -lt 5){
			$FolderSize = Get-ChildItemDeep -Path $Folder -Depth 1 -ErrorAction SilentlyContinue |
			Where-Object { -not $_.PSIsContainer } |
			Measure-Object -Property Length -Sum |
			Select-Object -ExpandProperty Sum
		}
		else{
			$FolderSize = Get-ChildItem -Path $Folder -Depth 1 -Recurse -ErrorAction SilentlyContinue -Force |
			Where-Object { -not $_.PSIsContainer } |
			Measure-Object -Property Length -Sum |
			Select-Object -ExpandProperty Sum
		}
    $Results.Add(( New-Object -TypeName psobject -Property @{
    Path = (" ")+$Folder
    Size = Get-FormattedSize -Size $FolderSize
    } ))

    $Files = Get-ChildItem -Path $Folder -ErrorAction SilentlyContinue -Force | Where-Object { -not $_.PSIsContainer } | sort-Object -property length -Descending


    foreach( $File in $Files ){
        $Results.Add(( New-Object -TypeName psobject -Property @{
            Path = ("  |_ ") +$File.Name
            Size = Get-FormattedSize -Size $File.Length
            } ))
        }

    $Results.Add( '' )
    }

$a = $Results |
    Select-Object -Property Path, Size


$outPath = $path+$filename
#Write-Host "OutPath $outPath"
#$a | Out-File -FilePath $outPath -Force
$psObj = New-Object PSObject -Property @{
    "Disk Details" = $a
    
}

#$psObj | Format-List
foreach($obj in $psObj.PSObject.Properties)
    {
            $obj.Name
            "*************************************************************************************"
            $obj.Value
            ""
            ""
    }
}

##Recursive check###
else{

$Results = New-Object -TypeName System.Collections.ArrayList

$RootSize = Get-ChildItem -Path $RootFolder -Recurse -ErrorAction SilentlyContinue -Force |
#$RootSize = Get-ChildItem -Path $RootFolder -Recurse -ErrorAction SilentlyContinue -Force|
        Where-Object { -not $_.PSIsContainer } |
        Measure-Object -Property Length -Sum |
        Select-Object -ExpandProperty Sum

$null = $Results.Add(( New-Object -TypeName psobject -Property @{
    Path = $RootFolder
    Size = Get-FormattedSize -Size $RootSize
    } ))

$null = $Results.Add( '' )

$Folders = Get-ChildItem -Path $RootFolder -Recurse -ErrorAction SilentlyContinue -Force|
#$Folders = Get-ChildItem -Path $RootFolder -ErrorAction SilentlyContinue -Force|
    Where-Object { $_.PSIsContainer } |
    Select-Object -ExpandProperty FullName

$Folders = ,$RootFolder + $Folders

$null = foreach( $Folder in $Folders ){
		if((Get-Host).Version.Major -lt 5){
			$FolderSize = Get-ChildItemDeep -Path $Folder -Depth 1 -ErrorAction SilentlyContinue |
			Where-Object { -not $_.PSIsContainer } |
			Measure-Object -Property Length -Sum |
			Select-Object -ExpandProperty Sum
		}
		else{
			$FolderSize = Get-ChildItem -Path $Folder -ErrorAction SilentlyContinue -Force |
			Where-Object { -not $_.PSIsContainer } |
			Measure-Object -Property Length -Sum |
			Select-Object -ExpandProperty Sum
		}

    $Results.Add(( New-Object -TypeName psobject -Property @{
    Path = (" ")+$Folder
    Size = Get-FormattedSize -Size $FolderSize
    } ))

    $Files = Get-ChildItem -Path $Folder -ErrorAction SilentlyContinue -Force| Where-Object { -not $_.PSIsContainer } | sort-Object -property length -Descending


    foreach( $File in $Files ){
        $Results.Add(( New-Object -TypeName psobject -Property @{
            Path = ("  |_ ") +$File.Name
            Size = Get-FormattedSize -Size $File.Length
            } ))
        }

    $Results.Add( '' )
    }

$a = $Results |
    Select-Object -Property Path, Size

#Write-Host $a
$outPath = $path+$filename
#Write-Host "OutPath $outPath"
#$a | Out-File -FilePath $outPath -Force

$psObj = New-Object PSObject -Property @{
    "Disk Details" = $a
    
}

#$psObj | Format-List
foreach($obj in $psObj.PSObject.Properties)
    {
            $obj.Name
            "*************************************************************************************"
            $obj.Value
            ""
            ""
    }
}

#End of try block
}catch{
      "UNIQUEERRORCODE : Error occured in the scripts $($_.Exception)"
      Write-Host ERROR "Error occured in the scripts $($_.Exception)"
}#+#scriptTimeOut#=#number#1800.0#+#scriptWorkingDirectory#=#string##+#scriptRefreshTime#=#number#5.0#+#deleteResourceAfterRun#=#boolean#true#+#scriptType#=#string#powershell#+#resourceSearchReplace#=#boolean#false#+#scriptInteractiveSession#=#boolean#false#+#resourceToCopy#=#Any#Any#__NULL__#+#copyResource#=#boolean#false#]#